/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 06 22:35:43 GMT 2017
 */

package calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import calendar.Appt;
import calendar.CalDay;
import calendar.TimeTable;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Collection;
import java.util.GregorianCalendar;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeTable_ESTest extends TimeTable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      int[] intArray0 = new int[5];
      Appt appt0 = new Appt(0, 3249, 0, 0, 0, "V&c4R", "V&c4R");
      linkedList0.offerFirst(appt0);
      linkedList0.add(appt0);
      timeTable0.permute(linkedList0, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      LinkedHashSet<Appt> linkedHashSet0 = new LinkedHashSet<Appt>();
      linkedHashSet0.add((Appt) null);
      linkedList0.addAll((Collection<? extends Appt>) linkedHashSet0);
      Appt appt0 = new Appt(1306, (-1671), 3, 0, (-1), "", "");
      linkedList0.add(appt0);
      Appt appt1 = new Appt(3, 3, 3, 3, 3, "", "");
      timeTable0.deleteAppt(linkedList0, appt1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      // Undeclared exception!
      try { 
        timeTable0.permute((LinkedList<Appt>) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      int[] intArray0 = new int[5];
      Appt appt0 = new Appt(3249, 0, 3249, 0, (-3352), "8oYOY", "");
      linkedList0.add(appt0);
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        timeTable0.permute(linkedList0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      LinkedHashSet<Appt> linkedHashSet0 = new LinkedHashSet<Appt>();
      linkedHashSet0.add((Appt) null);
      linkedList0.addAll((Collection<? extends Appt>) linkedHashSet0);
      Appt appt0 = new Appt(1306, (-1671), 3, 0, (-1), "", "");
      linkedList0.add(appt0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        timeTable0.permute(linkedList0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("calendar.TimeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = calDay0.appts;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(1000, 0, 0, 3960, 124, 2);
      // Undeclared exception!
      timeTable0.getApptRange(linkedList0, mockGregorianCalendar1, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      timeTable0.permute(linkedList0, (int[]) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      LinkedHashSet<Appt> linkedHashSet0 = new LinkedHashSet<Appt>();
      Appt appt0 = new Appt((-1), (-1), 3, 2, (-1277), "", "");
      linkedHashSet0.add(appt0);
      linkedHashSet0.add((Appt) null);
      linkedList0.addAll((Collection<? extends Appt>) linkedHashSet0);
      linkedList0.add(appt0);
      Appt appt1 = new Appt(3, 3, 3, 3, 3, "", "");
      // Undeclared exception!
      try { 
        timeTable0.deleteAppt(linkedList0, appt1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.TimeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      Appt appt0 = new Appt(3, 3, 3, 3, 3, "", "");
      timeTable0.deleteAppt(linkedList0, appt0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      timeTable0.deleteAppt(linkedList0, (Appt) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      Appt appt0 = new Appt(1306, (-1671), 3, 0, (-1), "", "");
      timeTable0.deleteAppt(linkedList0, appt0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      Appt appt0 = new Appt(8, 8, (-3007), 8, 8, "Ty!JH}/.C5AUY", "Ty!JH}/.C5AUY");
      timeTable0.deleteAppt((LinkedList<Appt>) null, appt0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      TimeZone timeZone0 = TimeZone.getTimeZone("Ty!JH}/.C5AUY");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      try { 
        timeTable0.getApptRange((LinkedList<Appt>) null, mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Second date specified is not  before the first date specified.
         //
         verifyException("calendar.TimeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond((-1), 0, zoneOffset0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofInstant(localDateTime0, zoneOffset0, (ZoneId) zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 0);
      // Undeclared exception!
      try { 
        timeTable0.getApptRange((LinkedList<Appt>) null, gregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.TimeTable", e);
      }
  }
}
