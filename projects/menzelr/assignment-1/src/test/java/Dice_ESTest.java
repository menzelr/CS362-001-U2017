/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 10 00:24:09 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Dice_ESTest extends Dice_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Dice dice0 = new Dice();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1588));
      linkedList0.addFirst(integer0);
      // Undeclared exception!
      try { 
        dice0.getTotal(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Dice dice0 = new Dice();
      dice0.roll((-2073432485));
      int int0 = dice0.getDie1();
      assertEquals((-207343247), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Dice dice0 = new Dice();
      // Undeclared exception!
      try { 
        dice0.getTotal((List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Dice", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Dice dice0 = new Dice();
      // Undeclared exception!
      try { 
        dice0.crit((List<Integer>) null, (-65));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Dice dice0 = new Dice();
      dice0.roll();
      assertEquals(0, dice0.getDie1());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Dice dice0 = new Dice();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      int int0 = dice0.crit(linkedList0, (-1689));
      assertEquals(0, dice0.getDie1());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Dice dice0 = new Dice();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1588));
      linkedList0.addFirst(integer0);
      int int0 = dice0.crit(linkedList0, (-1588));
      assertEquals(0, dice0.getDie1());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Dice dice0 = new Dice();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = dice0.crit(linkedList0, (-1689));
      assertEquals(0, dice0.getDie1());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Dice dice0 = new Dice();
      dice0.roll(0);
      int int0 = dice0.getDie1();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Dice dice0 = new Dice();
      int int0 = dice0.getDie1();
      assertEquals(0, int0);
  }
}
